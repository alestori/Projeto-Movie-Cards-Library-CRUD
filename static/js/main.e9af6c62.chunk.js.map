{"version":3,"sources":["components/Loading.jsx","components/MovieForm.jsx","components/MovieCard.jsx","services/movieData.js","services/movieAPI.jsx","pages/EditMovie.jsx","pages/MovieDetails.jsx","pages/MovieList.jsx","pages/NewMovie.jsx","pages/NotFound.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Loading","className","Component","MovieForm","props","state","movie","handleSubmit","bind","onSubmit","this","field","newValue","setState","title","htmlFor","placeholder","id","type","value","onChange","event","updateMovie","target","subtitle","imagePath","storyline","genre","rating","step","min","max","destination","onClick","to","style","textDecoration","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","React","defaultProps","MovieCard","data-testid","src","alt","movies","bookmarked","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","simulateRequest","response","callback","setTimeout","getMovie","movieId","find","mov","parseInt","Promise","resolve","updatedMovie","map","EditMovie","mounted","loading","shouldRedirect","handleFetchMovie","a","movieAPI","match","params","MovieDetails","delete","filter","status","MovieList","importedMovies","key","NewMovie","newMovie","movieData","nextId","length","NotFound","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e9af6c62.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div className=\"loading\">Carregando...</div>\n    );\n  }\n}\n\nexport default Loading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_title\">\n          Título\n          <input\n            placeholder=\"Insira o título\"\n            id=\"movie_title\"\n            type=\"text\"\n            className=\"validate\"\n            value={ title }\n            onChange={ (event) => this.updateMovie('title', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_subtitle\">\n          Subtítulo\n          <input\n            placeholder=\"Insira o subtítulo\"\n            id=\"movie_subtitle\"\n            type=\"text\"\n            value={ subtitle }\n            onChange={ (event) => this.updateMovie('subtitle', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row\">\n        <label htmlFor=\"movie_image\">\n          Imagem\n          <input\n            placeholder=\"Insira o caminho da imagem\"\n            id=\"movie_image\"\n            type=\"text\"\n            value={ imagePath }\n            onChange={ (event) => this.updateMovie('imagePath', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_storyline\">\n          Sinopse\n          <textarea\n            id=\"movie_storyline\"\n            value={ storyline }\n            onChange={ (event) => this.updateMovie('storyline', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_genre\">\n          Gênero\n          <select\n            id=\"movie_genre\"\n            value={ genre }\n            onChange={ (event) => this.updateMovie('genre', event.target.value) }\n          >\n            <option value=\"action\">Ação</option>\n            <option value=\"comedy\">Comédia</option>\n            <option value=\"thriller\">Suspense</option>\n            <option value=\"fantasy\">Fantasia</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_rating\">\n          Avaliação\n          <input\n            placeholder=\"Dê a avaliação do filme\"\n            id=\"movie_rating\"\n            type=\"number\"\n            step={ 0.1 }\n            min={ 0 }\n            max={ 5 }\n            value={ rating }\n            onChange={ (event) => this.updateMovie('rating', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    const { destination } = this.props;\n    return (\n      <div className=\"form-btn-div\">\n        <button\n          type=\"button\"\n          onClick={ this.handleSubmit }\n          className=\"button form-btn\"\n        >\n          SUBMIT\n        </button>\n        <Link\n          to={ destination }\n          style={ { textDecoration: 'none' } }\n          className=\"form-return button\"\n        >\n          <p className=\"btn-text\">VOLTAR</p>\n        </Link>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <main>\n        <form>\n          <div className=\"row\">\n            {this.renderTitleInput()}\n            {this.renderSubtitleInput()}\n          </div>\n          <div className=\"row\">\n            {this.renderImagePathInput()}\n            {this.renderStorylineInput()}\n          </div>\n          <div className=\"row\">\n            {this.renderGenreSelection()}\n            {this.renderRatingInput()}\n          </div>\n          {this.renderSubmitButton()}\n        </form>\n      </main>\n    );\n  }\n}\n\nexport default MovieForm;\n\nMovieForm.defaultProps = {\n  movie: {\n    title: '',\n    subtitle: '',\n    storyline: '',\n    rating: '',\n    imagePath: '',\n    genre: '',\n  },\n};\n\nMovieForm.propTypes = {\n  destination: PropTypes.string.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  movie: PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    title: PropTypes.string,\n    storyline: PropTypes.string,\n    subtitle: PropTypes.string,\n    rating: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    imagePath: PropTypes.string,\n    bookmarked: PropTypes.bool,\n    genre: PropTypes.string,\n  }),\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { title, subtitle, imagePath, storyline, id } = movie;\n    return (\n      <div data-testid=\"movie-card\" className=\"movie-card\">\n        <img src={ imagePath } alt={ `Thumbnail de ${title}` } />\n        <div className=\"titles\">\n          <h1 className=\"movie-card-title\">{title}</h1>\n          <h4 className=\"movie-card-subtitle\">{subtitle}</h4>\n        </div>\n        <p className=\"movie-card-storyline\">{storyline}</p>\n        <Link to={ `movies/${id}` } className=\"more-details\">VER DETALHES</Link>\n      </div>\n    );\n  }\n}\n\nexport default MovieCard;\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    subtitle: PropTypes.string.isRequired,\n    imagePath: PropTypes.string.isRequired,\n    storyline: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n  }).isRequired,\n};\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: 'King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire\\'s plans to steal the sacred crystal.',\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: 'A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human\\'s future hope, the legendary city of Olympus.',\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 2000;\nconst SUCCESS_STATUS = 'OK';\n\n// --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso mais futuramente\n// --------------------------------------------------------------------\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    const movies = readMovies();\n    simulateRequest(movies)(resolve);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n  return new Promise((resolve) => {\n    simulateRequest(movie)(resolve);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => (\n  new Promise((resolve) => {\n    const movies = readMovies().map((movie) => {\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\n        return { ...movie, ...updatedMovie };\n      }\n      return movie;\n    });\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const createMovie = (movieData) => (\n  new Promise((resolve) => {\n    let movies = readMovies();\n    const nextId = movies[movies.length - 1].id + 1;\n    const newMovie = { ...movieData, id: nextId };\n    movies = [...movies, newMovie];\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\n  });\n};\n","import React, { Component } from 'react';\n\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { MovieForm, Loading } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.mounted = false;\n    this.state = {\n      loading: true,\n      shouldRedirect: false,\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleFetchMovie = this.handleFetchMovie.bind(this);\n  }\n\n  // solução para warning:\n  // https://www.akashmittal.com/cant-perform-react-state-update-unmounted-component/\n  componentDidMount() {\n    this.mounted = true;\n    this.handleFetchMovie();\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  async handleSubmit(updatedMovie) {\n    movieAPI.updateMovie(updatedMovie);\n    this.setState({ shouldRedirect: true });\n  }\n\n  handleFetchMovie() {\n    this.setState({ loading: true }, async () => {\n      const { match: { params: { id } } } = this.props;\n      const movie = await movieAPI.getMovie(id);\n      if (this.mounted) {\n        this.setState({ movie, loading: false });\n      }\n    });\n  }\n\n  render() {\n    const { loading, shouldRedirect, movie } = this.state;\n    if (shouldRedirect) {\n      // Redirect\n      return <Redirect to=\"/\" />;\n    }\n\n    if (loading) {\n      // render Loading\n      return <Loading />;\n    }\n\n    const { match: { params: { id } } } = this.props;\n    return (\n      <div data-testid=\"edit-movie\">\n        <MovieForm\n          movie={ movie }\n          onSubmit={ this.handleSubmit }\n          destination={ `/movies/${id}` }\n        />\n      </div>\n    );\n  }\n}\n\nexport default EditMovie;\n\nEditMovie.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }),\n  }).isRequired,\n};\n","import React, { Component } from 'react';\n\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\nclass MovieDetails extends Component {\n  constructor(props) {\n    super(props);\n    this.mounted = false;\n    this.state = {\n      loading: true,\n    };\n    this.handleFetchMovie = this.handleFetchMovie.bind(this);\n    this.delete = this.delete.bind(this);\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    this.handleFetchMovie();\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  async handleFetchMovie() {\n    this.setState({ loading: true },\n      async () => {\n        const { match: { params: { id } } } = this.props;\n        const movie = await movieAPI.getMovie(id);\n        const { title, storyline, imagePath, genre, rating, subtitle } = movie;\n        if (this.mounted) {\n          this.setState({\n            title, storyline, imagePath, genre, rating, subtitle, id, loading: false,\n          });\n        }\n      });\n  }\n\n  delete() {\n    const { id } = this.state;\n    movieAPI.deleteMovie(id);\n  }\n\n  render() {\n    // Change the condition to check the state\n    // if (true) return <Loading />;\n    const { loading } = this.state;\n    if (loading) return <Loading />;\n\n    const { title, storyline, imagePath, genre, rating, subtitle, id } = this.state;\n\n    return (\n      <main>\n        <div data-testid=\"movie-details\" className=\"movie-details\">\n          <img alt=\"Movie Cover\" src={ `../${imagePath}` } className=\"movie-cover\" />\n          <div className=\"titles\">\n            <h1 className=\"movie-card-title\">{`${title}`}</h1>\n            <h4 className=\"movie-card-subtitle\">{ `${subtitle}` }</h4>\n          </div>\n          <p className=\"movie-card-storyline\">{ `${storyline}` }</p>\n          <p className=\"movie-card-genre\">{ `${genre}` }</p>\n          <div className=\"movie-card-rating-and-buttons\">\n            <p className=\"rating\">{ `Avaliação: ${rating}` }</p>\n            <Link\n              to={ `/movies/${id}/edit` }\n              style={ { textDecoration: 'none' } }\n              className=\"edit button\"\n            >\n              EDITAR\n            </Link>\n            <Link\n              to=\"/\"\n              style={ { textDecoration: 'none' } }\n              className=\"return button\"\n            >\n              {/* erro aqui */}\n              <p className=\"btn-text\">\n                VOLTAR\n              </p>\n            </Link>\n            <Link\n              to=\"/\"\n              onClick={ this.delete }\n              style={ { textDecoration: 'none' } }\n              className=\"delete button\"\n            >\n              {/* erro aqui */}\n              <p className=\"btn-text\">DELETAR</p>\n            </Link>\n          </div>\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default MovieDetails;\n\nMovieDetails.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }),\n  }).isRequired,\n};\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport MovieCard from '../components/MovieCard';\nimport Loading from '../components/Loading';\n\nimport * as movieAPI from '../services/movieAPI';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n      loading: true,\n    };\n    this.handleFetchMovie = this.handleFetchMovie.bind(this);\n  }\n\n  componentDidMount() {\n    this.handleFetchMovie();\n  }\n\n  async handleFetchMovie() {\n    const importedMovies = await movieAPI.getMovies();\n    this.setState({\n      movies: importedMovies,\n      loading: false });\n  }\n\n  render() {\n    const { movies, loading } = this.state;\n\n    // Render Loading here if the request is still happening\n    if (loading) return <Loading />;\n\n    return (\n      <main>\n        <Link\n          to=\"/movies/new\"\n          className=\"add button\"\n          style={ { textDecoration: 'none' } }\n        >\n          ADICIONAR CARTÃO\n        </Link>\n        <div data-testid=\"movie-list\" className=\"movie-list\">\n          {movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />)}\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default MovieList;\n","import React, { Component } from 'react';\n\nimport { Redirect } from 'react-router-dom';\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      shouldRedirect: false,\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(newMovie) {\n    movieAPI.createMovie(newMovie);\n    this.setState({ shouldRedirect: true });\n  }\n\n  render() {\n    const { shouldRedirect } = this.state;\n\n    if (shouldRedirect) return <Redirect to=\"/\" />;\n\n    return (\n      <div data-testid=\"new-movie\">\n        <MovieForm onSubmit={ this.handleSubmit } destination=\"/\" />\n      </div>\n    );\n  }\n}\nexport default NewMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport { MovieList, NewMovie, MovieDetails, NotFound, EditMovie } from './pages';\n\nfunction App() {\n  return (\n    <HashRouter>\n      <header className=\"page-header\">\n        <h1 className=\"page-title\">Movie Card Library CRUD</h1>\n      </header>\n      <Switch>\n        <Route exact path=\"/\" component={ MovieList } />\n        <Route exact path=\"/movies/new\" component={ NewMovie } />\n        <Route exact path=\"/movies/:id\" component={ MovieDetails } />\n        <Route exact path=\"/movies/:id/edit\" component={ EditMovie } />\n        <Route component={ NotFound } />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}